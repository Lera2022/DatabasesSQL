CREATE DATABASE MySampleDB;
show databases;

CREATE TABLE table_name
(
  column_name_1 column_type_1,
  column_name_2 column_type_2,
  ...,
  column_name_N column_type_N
);

-- Комментарий
-- table_name - имя таблицы;
-- column_name - имя столбца;
-- column_type - тип данных столбца.

CREATE TABLE table_name
(
  column1 column_definition,
  column2 column_definition,
  CONSTRAINT [constraint_name]
  PRIMARY KEY [ USING BTREE | HASH ] (column_1, column_2, ... column_n)
);

[CONSTRAINT имя_ограничения]
FOREIGN KEY (столбец1, столбец2, ... столбецN)
REFERENCES главная_таблица (столбец_главной_таблицы1, столбец_главной_таблицы2, ... столбец_главной_таблицыN)
[ON DELETE действие]
[ON UPDATE действие]

 CREATE TABLE Customers
 (
  Id INT PRIMARY KEY AUTO_INCREMENT,
  Age INT,
  FirstName VARCHAR(20) NOT NULL,
  LastName VARCHAR(20) NOT NULL,
  Phone VARCHAR(20) NOT NULL UNIQUE
 );
 CREATE TABLE Orders
 (
  Id INT PRIMARY KEY AUTO_INCREMENT,
  CustomerId INT,
  CreatedAt Date,
  FOREIGN KEY (CustomerId) REFERENCES Customers (Id)
 );

 SELECT 3+5;
 SELECT 3-5;
 SELECT 3*5;
 SELECT 18014398509481984*18014398509481984;
 # произведение умножения целых чисел выходит за границы 64-битового диапазона
 # для вычислений с точностью BIGINT

 -- "+" - сложение
 SELECT 3+5;
 # "-" - вычитание
 SELECT 3-5;
 /*
 Умножение "*"
 */
 SELECT 3*5;
 SELECT 3/5;
 SELECT 102/0;
 # деление на ноль даст NULL

 CREATE TABLE Products
 (
  Id INT AUTO_INCREMENT PRIMARY KEY,
  ProductName VARCHAR(30) NOT NULL,
  Manufacturer VARCHAR(20) NOT NULL,
  ProductCount INT DEFAULT 0,
  Price DECIMAL
 );

 USE homework1;

SELECT * FROM phones
WHERE Manufacturer = 'Samsung' AND Price > 50000;

SELECT * FROM phones
WHERE Manufacturer = 'Samsung' OR Price > 50000;

SELECT * FROM phones
WHERE NOT Manufacturer = 'Samsung';

SELECT * FROM Products
WHERE Manufacturer ='Samsung' OR NOT Price > 30000 AND ProductCount > 2;

SELECT * FROM Products
WHERE Manufacturer ='Samsung' OR NOT (Price > 30000 AND ProductCount > 2);

CASE
    WHEN условие_1 THEN результат_1
    WHEN условие_2 THEN результат_2
    .................................
    WHEN условие_N THEN условие_N
    [ELSE альтернативный результат]
END

SELECT ProductName, ProductCount,
CASE
	WHEN ProductCount = 1
		THEN 'Товар заканчивается'
	WHEN ProductCount = 2
		THEN 'Мало товара'
	WHEN ProductCount = 3
		THEN 'Есть в наличии'
	ELSE 'Много товара'
END AS Category
FROM phones;

IF(условие, значение_1, значение_2)
#Если условие, передаваемое в качестве первого параметра, верно, то возвращается
#первое значение, иначе возвращается второе значение

SELECT ProductName, Manufacturer,
	IF(ProductCount>3, 'Много товара', 'Мало товара')
FROM phones;

 CREATE TABLE Products
 (
    Id INT AUTO_INCREMENT PRIMARY KEY,
    ProductName VARCHAR(30) NOT NULL,
    Manufacturer VARCHAR(20) NOT NULL,
    ProductCount INT DEFAULT 0,
    Price DECIMAL
 );
 INSERT INTO Products (ProductName, Manufacturer, ProductCount, Price)
  VALUES
  ('iPhone X', 'Apple', 3, 76000),
  ('iPhone 8', 'Apple', 2, 51000),
  ('Galaxy S9', 'Samsung', 2, 56000),
  ('Galaxy S8', 'Samsung', 1, 41000),
  ('P20 Pro', 'Huawei', 5, 36000);

  UPDATE имя_таблицы
  SET столбец1 = значение1, столбец2 = значение2, ... столбецN = значениеN
  [WHERE условие_обновления]

  UPDATE Products
  SET Price = Price + 3000;

DELETE FROM имя_таблицы
[WHERE условие_удаления]

DELETE FROM Products
WHERE Manufacturer='Huawei';

WHERE выражение [NOT] IN (выражение);

SELECT * FROM Products
WHERE Manufacturer IN ('Apple', 'Samsung');